What is it?
Rocnnet is an Automated Differentation Library supporting Matrix Operations

Layers:
- Graph:
    Purpose:
    Create a layer of abstraction to manage the distribution of data.
    In general, data is transfered between graph nodes from source 
    (or sources) to sinks.

- Tensor
    Purpose:
    Performs operations and stores shapes (dimensionality) information.

- Memory management
    Purpose:
    Manages the allocation, deallocation, and serialization of raw data
    based on supporting architecture (none yet)

Design Pattern:
Graph uses composite pattern between ivariable and ioperation nodes.
Nodes are made reactive using observer pattern.
Memory management serves as the factory to tensors' raw data.
A singleton session is used to manage global options such as shape evaluation when constructing
and initialize all variables.

Key players:
- iobserver and subject
- ivariable and ileaf
- ioperation
- iexecutor
- tensor
- iallocator
- initializer
- session
- tensorshape

Expected Behavior
- iobserver should detach (unsubscribe) from subject on destruction
- iobserver should provide information regarding about its leaf subjects (purely independent nodes)
- copying observers will copy over its dependencies (subjects)

- subject should detach and mark all observers for destruction on destruction
- subject should notify all observers and pass some metadata (caller, et al.) to some or all observers
- observers can publically attach and detach (subscribe and unsubscribe) to subjects
- copying subjects will not copy over the observers

- ileaf inheriteds should auto notify when initialized or reinitialized
- variables auto initialize scalar on construction
- assigning raw data or tensors to placeholders will initialize it
- placeholders can be initialized at construction, 
  this initializer will be promptedly destroyed
- constants must self destruct when its subject loses all its subscribers
- constants are always initialized
- constants can't be allocated on the stack
- variable's gradient is itself
- constant's gradient is a zero constant
- placeholder's gradient is a zero constant

- ioperation must not be allocated on the stack
- ioperation holding poorly defined tensors (null inputs) return null on evaluation
- ioperation must reuse its gradient object

- iexecutor should prevent its destination from being updated when its source nodes notify
- iexecutor should remove its source nodes when they are destroyed
- iexecutor should remove its destination nodes when they are destroyed
- group should execute its executors in order of when they are added

- tensors should allocate raw data on construction 
when tensorshape is fully defined
- tensor allocation requires a fully defined tensorshape either provided in construction
or provided in allocation call
- tensorshape provided in allocation call must be compatible with the tensorshape provided
in construction
- tensor_op must update its raw values before updating

- iallocator should have the option of tracking allocated size
- allocation of partially defined tensors will fail

- initialization of unallocated tensors will fail
- initialization of partially defined tensors will fail

- session should register all variable nodes on node construction
- session should unregister all destroyed variable nodes
- session should be singleton per thread
- session should be able to initialize all initialisable values
- session should be able to toggle between shape evaluation on
  variable node construction

- tensorshape is compatible if one of the shapes are undefined, or
  the tensors are of the same rank and dimension values equal for defined dimensions (> 0)
- tensorshape merge should return the most defined most defined shape
  that is dimensions > 0 should be preferred over dimension == 0
  tensorshapes that are incompatible will result in a logic error
- two tensorshapes can concatenate to form a tensorshape depending on the order of concatenation
- a tensor is partially defined if it has a rank
- a tensor is fully defined if it is at least partially defined 
  and all its dimensional values are defined (> 0)
